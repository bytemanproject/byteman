// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: ECAToken.flex

/*
 * JBoss, Home of Professional Open Source
 * Copyright 2008-10 Red Hat and individual contributors
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *
 * @authors Andrew Dinn
 */

package org.jboss.byteman.rule.grammar;

import java_cup.runtime.*;
import org.jboss.byteman.rule.grammar.PrintableSymbol;


@SuppressWarnings("fallthrough")
public class ECATokenLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int QUOTEDIDENT = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
          "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
          "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
                  "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
                  "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
                  "\11\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
                  "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
                  "\1\45\2\37\1\46\1\47\1\50\1\51\1\52\1\53"+
                  "\1\54\1\55\1\56\1\57\1\60\1\61\3\37\1\62"+
                  "\1\63\1\64\1\65\1\37\1\0\1\66\1\67\1\70"+
                  "\1\71\1\72\1\73\1\74\1\75\1\76\2\37\1\77"+
                  "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
                  "\1\110\1\111\1\112\3\37\1\113\1\114\1\115\1\116"+
                  "\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\4\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
                  "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
                  "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
                  "\1\27\17\30\1\31\1\32\1\33\17\30\1\34\1\35"+
                  "\1\36\1\37\1\40\1\41\1\42\1\43\1\40\2\44"+
                  "\1\45\1\46\2\47\1\50\1\51\1\0\2\51\1\52"+
                  "\1\53\1\0\1\54\1\0\1\55\1\56\1\57\1\60"+
                  "\1\61\3\30\1\62\1\57\1\30\1\60\1\26\1\63"+
                  "\1\56\1\24\2\30\1\50\2\30\1\64\15\30\1\50"+
                  "\7\30\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
                  "\1\53\1\0\2\53\1\25\1\73\1\52\4\30\1\6"+
                  "\1\74\1\3\14\30\1\3\6\30\1\75\4\30\1\76"+
                  "\1\14\3\30\1\77\12\30\1\100\1\16\2\30\1\101"+
                  "\1\13\1\102\4\30\1\20\1\30\1\103\2\30\1\104"+
                  "\3\30\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\117\0\236\0\355\0\u013c\0\u013c\0\u018b\0\u01da"+
                  "\0\u013c\0\u013c\0\u0229\0\u013c\0\u0278\0\u013c\0\u013c\0\u013c"+
                  "\0\u013c\0\u02c7\0\u013c\0\u02c7\0\u013c\0\u013c\0\u0316\0\u0365"+
                  "\0\u013c\0\u013c\0\u03b4\0\u0403\0\u0452\0\u013c\0\u04a1\0\u04f0"+
                  "\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u0719\0\u0768"+
                  "\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3\0\u013c\0\u013c\0\u013c"+
                  "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b"+
                  "\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u013c"+
                  "\0\u0de3\0\u013c\0\u013c\0\u0e32\0\u013c\0\u013c\0\u0e81\0\u0ed0"+
                  "\0\u013c\0\u0f1f\0\u013c\0\u013c\0\u013c\0\u0f6e\0\u013c\0\u013c"+
                  "\0\u0fbd\0\u100c\0\u105b\0\u013c\0\u10aa\0\u10f9\0\u013c\0\u1148"+
                  "\0\u013c\0\u013c\0\u013c\0\u013c\0\u1197\0\u11e6\0\u1235\0\u1284"+
                  "\0\u053f\0\u053f\0\u12d3\0\u053f\0\u053f\0\u053f\0\u053f\0\u053f"+
                  "\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e\0\u053f\0\u14ad\0\u14fc"+
                  "\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774"+
                  "\0\u17c3\0\u1812\0\u1861\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec"+
                  "\0\u1a3b\0\u1a8a\0\u1ad9\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c"+
                  "\0\u013c\0\u013c\0\u013c\0\u1b28\0\u1b77\0\u1bc6\0\u013c\0\u013c"+
                  "\0\u053f\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u053f\0\u053f\0\u1d51"+
                  "\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9"+
                  "\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241"+
                  "\0\u2290\0\u22df\0\u232e\0\u053f\0\u237d\0\u23cc\0\u241b\0\u246a"+
                  "\0\u053f\0\u053f\0\u24b9\0\u2508\0\u2557\0\u053f\0\u25a6\0\u25f5"+
                  "\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u286d"+
                  "\0\u053f\0\u053f\0\u28bc\0\u290b\0\u053f\0\u053f\0\u053f\0\u295a"+
                  "\0\u29a9\0\u29f8\0\u2a47\0\u053f\0\u2a96\0\u053f\0\u2ae5\0\u2b34"+
                  "\0\u053f\0\u2b83\0\u2bd2\0\u2c21\0\u053f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\5\2\6\1\0\1\7\1\10\1\11\1\12\1\13"+
                  "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
                  "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
                  "\1\34\1\35\1\36\1\5\1\37\1\40\1\41\1\42"+
                  "\1\43\1\44\1\45\1\41\1\46\1\47\1\50\1\51"+
                  "\1\52\1\53\1\41\1\54\1\41\1\55\3\41\1\56"+
                  "\1\5\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
                  "\1\66\1\67\1\41\1\70\1\71\1\72\1\73\1\74"+
                  "\1\75\1\41\1\76\1\41\1\77\3\41\1\100\1\101"+
                  "\1\102\1\103\2\104\1\105\1\104\1\0\1\104\1\106"+
                  "\54\104\1\107\33\104\2\110\1\111\1\110\1\112\6\110"+
                  "\1\113\103\110\2\114\1\115\1\114\1\116\112\114\121\0"+
                  "\1\6\145\0\1\117\72\0\1\120\1\0\1\120\6\0"+
                  "\1\120\1\121\1\0\1\121\2\0\1\120\1\122\6\0"+
                  "\1\120\25\123\3\0\1\120\25\123\16\0\1\124\130\0"+
                  "\1\27\1\30\113\0\1\125\16\0\1\126\4\0\1\127"+
                  "\23\0\1\126\46\0\1\125\1\0\2\30\13\0\1\126"+
                  "\4\0\1\127\23\0\1\126\45\0\1\130\6\0\1\131"+
                  "\1\132\116\0\1\133\116\0\1\134\1\135\74\0\1\41"+
                  "\13\0\2\41\7\0\13\41\1\136\11\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\10\41\1\137\14\41"+
                  "\4\0\25\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\25\41\14\0\1\41\13\0\2\41\7\0\10\41"+
                  "\1\140\3\41\1\141\10\41\4\0\25\41\14\0\1\41"+
                  "\13\0\2\41\7\0\16\41\1\142\6\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\1\143\24\41\4\0"+
                  "\25\41\14\0\1\41\13\0\2\41\7\0\4\41\1\144"+
                  "\14\41\1\145\3\41\4\0\25\41\14\0\1\41\13\0"+
                  "\2\41\7\0\5\41\1\146\17\41\4\0\25\41\14\0"+
                  "\1\41\13\0\2\41\7\0\4\41\1\147\14\41\1\150"+
                  "\3\41\4\0\25\41\14\0\1\41\13\0\2\41\7\0"+
                  "\10\41\1\151\3\41\1\152\10\41\4\0\25\41\14\0"+
                  "\1\41\13\0\2\41\7\0\4\41\1\153\7\41\1\154"+
                  "\5\41\1\155\2\41\4\0\25\41\14\0\1\41\13\0"+
                  "\2\41\7\0\17\41\1\156\5\41\4\0\25\41\14\0"+
                  "\1\41\13\0\2\41\7\0\11\41\1\157\13\41\4\0"+
                  "\25\41\14\0\1\41\13\0\2\41\7\0\4\41\1\160"+
                  "\20\41\4\0\25\41\14\0\1\41\13\0\2\41\7\0"+
                  "\7\41\1\161\1\162\6\41\1\163\5\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\25\41\4\0\13\41"+
                  "\1\164\11\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\10\41\1\165\14\41\14\0\1\41\13\0\2\41"+
                  "\7\0\25\41\4\0\11\41\1\166\13\41\14\0\1\41"+
                  "\13\0\2\41\7\0\25\41\4\0\10\41\1\167\3\41"+
                  "\1\141\10\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\16\41\1\142\6\41\14\0\1\41\13\0\2\41"+
                  "\7\0\25\41\4\0\1\170\24\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\4\41\1\144\14\41\1\145"+
                  "\3\41\14\0\1\41\13\0\2\41\7\0\25\41\4\0"+
                  "\5\41\1\146\5\41\1\171\11\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\4\41\1\147\14\41\1\150"+
                  "\3\41\14\0\1\41\13\0\2\41\7\0\25\41\4\0"+
                  "\10\41\1\172\3\41\1\173\10\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\4\41\1\174\7\41\1\175"+
                  "\5\41\1\176\2\41\14\0\1\41\13\0\2\41\7\0"+
                  "\25\41\4\0\17\41\1\156\5\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\11\41\1\177\13\41\14\0"+
                  "\1\41\13\0\2\41\7\0\25\41\4\0\4\41\1\200"+
                  "\20\41\14\0\1\41\13\0\2\41\7\0\25\41\4\0"+
                  "\7\41\1\201\1\202\6\41\1\203\5\41\120\0\1\204"+
                  "\2\0\2\104\1\0\1\104\1\0\1\104\1\0\54\104"+
                  "\1\0\33\104\6\0\1\205\54\0\1\206\15\0\1\207"+
                  "\3\0\1\210\1\0\1\211\7\0\2\110\1\0\1\110"+
                  "\1\0\6\110\1\0\103\110\2\0\1\111\116\0\1\115"+
                  "\140\0\1\120\1\122\115\0\2\122\101\0\1\123\13\0"+
                  "\2\123\7\0\25\123\4\0\25\123\30\0\2\125\12\0"+
                  "\1\212\1\126\1\213\27\0\1\126\43\0\1\214\1\0"+
                  "\1\214\2\0\1\215\1\216\112\0\1\217\127\0\1\220"+
                  "\74\0\1\41\13\0\2\41\7\0\3\41\1\221\21\41"+
                  "\4\0\25\41\14\0\1\41\13\0\2\41\7\0\13\41"+
                  "\1\222\11\41\4\0\25\41\14\0\1\41\13\0\2\41"+
                  "\7\0\23\41\1\223\1\41\4\0\25\41\14\0\1\41"+
                  "\13\0\2\41\7\0\11\41\1\224\13\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\13\41\1\225\11\41"+
                  "\4\0\25\41\14\0\1\41\13\0\2\41\7\0\3\41"+
                  "\1\226\21\41\4\0\25\41\14\0\1\41\13\0\2\41"+
                  "\7\0\24\41\1\227\4\0\25\41\14\0\1\41\13\0"+
                  "\2\41\7\0\21\41\1\230\3\41\4\0\25\41\14\0"+
                  "\1\41\13\0\2\41\7\0\11\41\1\231\13\41\4\0"+
                  "\25\41\14\0\1\41\13\0\2\41\7\0\22\41\1\232"+
                  "\2\41\4\0\25\41\14\0\1\41\13\0\2\41\7\0"+
                  "\21\41\1\233\3\41\4\0\25\41\14\0\1\41\13\0"+
                  "\2\41\7\0\17\41\1\234\5\41\4\0\25\41\14\0"+
                  "\1\41\13\0\2\41\7\0\12\41\1\235\12\41\4\0"+
                  "\25\41\14\0\1\41\13\0\2\41\7\0\22\41\1\236"+
                  "\2\41\4\0\25\41\14\0\1\41\13\0\2\41\7\0"+
                  "\25\41\4\0\3\41\1\221\21\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\13\41\1\237\11\41\14\0"+
                  "\1\41\13\0\2\41\7\0\25\41\4\0\1\240\24\41"+
                  "\14\0\1\41\13\0\2\41\7\0\25\41\4\0\23\41"+
                  "\1\241\1\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\11\41\1\242\13\41\14\0\1\41\13\0\2\41"+
                  "\7\0\25\41\4\0\20\41\1\243\4\41\14\0\1\41"+
                  "\13\0\2\41\7\0\25\41\4\0\13\41\1\244\11\41"+
                  "\14\0\1\41\13\0\2\41\7\0\25\41\4\0\3\41"+
                  "\1\226\21\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\24\41\1\227\14\0\1\41\13\0\2\41\7\0"+
                  "\25\41\4\0\21\41\1\245\3\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\11\41\1\246\13\41\14\0"+
                  "\1\41\13\0\2\41\7\0\25\41\4\0\22\41\1\247"+
                  "\2\41\14\0\1\41\13\0\2\41\7\0\25\41\4\0"+
                  "\21\41\1\250\3\41\14\0\1\41\13\0\2\41\7\0"+
                  "\25\41\4\0\17\41\1\251\5\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\12\41\1\252\12\41\14\0"+
                  "\1\41\13\0\2\41\7\0\25\41\4\0\22\41\1\253"+
                  "\2\41\30\0\1\215\1\216\131\0\1\212\1\0\1\213"+
                  "\100\0\2\216\12\0\1\212\1\0\1\213\64\0\1\41"+
                  "\13\0\2\41\7\0\3\41\1\254\21\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\10\41\1\255\14\41"+
                  "\4\0\25\41\14\0\1\41\13\0\2\41\7\0\20\41"+
                  "\1\256\4\41\4\0\25\41\14\0\1\41\13\0\2\41"+
                  "\7\0\22\41\1\257\2\41\4\0\25\41\14\0\1\41"+
                  "\13\0\2\41\7\0\7\41\1\260\15\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\11\41\1\261\13\41"+
                  "\4\0\25\41\14\0\1\41\13\0\2\41\7\0\20\41"+
                  "\1\262\4\41\4\0\25\41\14\0\1\41\13\0\2\41"+
                  "\7\0\22\41\1\263\2\41\4\0\25\41\14\0\1\41"+
                  "\13\0\2\41\7\0\14\41\1\264\10\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\4\41\1\265\20\41"+
                  "\4\0\25\41\14\0\1\41\13\0\2\41\7\0\4\41"+
                  "\1\266\20\41\4\0\25\41\14\0\1\41\13\0\2\41"+
                  "\7\0\25\41\4\0\3\41\1\254\21\41\14\0\1\41"+
                  "\13\0\2\41\7\0\25\41\4\0\20\41\1\267\4\41"+
                  "\14\0\1\41\13\0\2\41\7\0\25\41\4\0\10\41"+
                  "\1\270\14\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\20\41\1\271\4\41\14\0\1\41\13\0\2\41"+
                  "\7\0\25\41\4\0\21\41\1\272\3\41\14\0\1\41"+
                  "\13\0\2\41\7\0\25\41\4\0\22\41\1\273\2\41"+
                  "\14\0\1\41\13\0\2\41\7\0\25\41\4\0\7\41"+
                  "\1\274\15\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\11\41\1\261\13\41\14\0\1\41\13\0\2\41"+
                  "\7\0\25\41\4\0\20\41\1\262\4\41\14\0\1\41"+
                  "\13\0\2\41\7\0\25\41\4\0\22\41\1\275\2\41"+
                  "\14\0\1\41\13\0\2\41\7\0\25\41\4\0\14\41"+
                  "\1\276\10\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\4\41\1\277\20\41\14\0\1\41\13\0\2\41"+
                  "\7\0\25\41\4\0\4\41\1\266\20\41\14\0\1\41"+
                  "\13\0\2\41\7\0\3\41\1\300\21\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\4\41\1\301\20\41"+
                  "\4\0\25\41\14\0\1\41\13\0\2\41\7\0\20\41"+
                  "\1\302\4\41\4\0\25\41\14\0\1\41\13\0\2\41"+
                  "\7\0\10\41\1\303\14\41\4\0\25\41\14\0\1\41"+
                  "\13\0\2\41\7\0\17\41\1\304\5\41\4\0\25\41"+
                  "\14\0\1\41\13\0\2\41\7\0\24\41\1\305\4\0"+
                  "\25\41\14\0\1\41\13\0\2\41\7\0\20\41\1\306"+
                  "\4\41\4\0\25\41\14\0\1\41\13\0\2\41\7\0"+
                  "\25\41\4\0\20\41\1\307\4\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\3\41\1\310\21\41\14\0"+
                  "\1\41\13\0\2\41\7\0\25\41\4\0\4\41\1\301"+
                  "\20\41\14\0\1\41\13\0\2\41\7\0\25\41\4\0"+
                  "\1\311\24\41\14\0\1\41\13\0\2\41\7\0\25\41"+
                  "\4\0\20\41\1\302\4\41\14\0\1\41\13\0\2\41"+
                  "\7\0\25\41\4\0\10\41\1\312\14\41\14\0\1\41"+
                  "\13\0\2\41\7\0\25\41\4\0\17\41\1\313\5\41"+
                  "\14\0\1\41\13\0\2\41\7\0\25\41\4\0\24\41"+
                  "\1\305\14\0\1\41\13\0\2\41\7\0\25\41\4\0"+
                  "\20\41\1\306\4\41\14\0\1\41\13\0\2\41\7\0"+
                  "\4\41\1\314\20\41\4\0\25\41\14\0\1\41\13\0"+
                  "\2\41\7\0\13\41\1\315\11\41\4\0\25\41\14\0"+
                  "\1\41\13\0\2\41\7\0\13\41\1\316\11\41\4\0"+
                  "\25\41\14\0\1\41\13\0\2\41\7\0\25\41\4\0"+
                  "\4\41\1\314\20\41\14\0\1\41\13\0\2\41\7\0"+
                  "\25\41\4\0\13\41\1\317\11\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\13\41\1\320\11\41\14\0"+
                  "\1\41\13\0\2\41\7\0\25\41\4\0\13\41\1\316"+
                  "\11\41\14\0\1\41\13\0\2\41\7\0\6\41\1\321"+
                  "\16\41\4\0\25\41\14\0\1\41\13\0\2\41\7\0"+
                  "\25\41\4\0\2\41\1\322\22\41\14\0\1\41\13\0"+
                  "\2\41\7\0\25\41\4\0\6\41\1\321\16\41\14\0"+
                  "\1\41\13\0\2\41\7\0\25\41\4\0\4\41\1\323"+
                  "\20\41\14\0\1\41\13\0\2\41\7\0\25\41\4\0"+
                  "\14\41\1\324\10\41\14\0\1\41\13\0\2\41\7\0"+
                  "\25\41\4\0\5\41\1\325\17\41\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11376];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\4\0\2\11\2\1\2\11\1\1\1\11\1\1\4\11"+
                  "\1\1\1\11\1\1\2\11\2\1\2\11\3\1\1\11"+
                  "\17\1\3\11\17\1\1\11\1\1\2\11\1\1\2\11"+
                  "\2\1\1\11\1\1\3\11\1\1\2\11\1\0\2\1"+
                  "\1\11\1\1\1\0\1\11\1\0\4\11\47\1\10\11"+
                  "\1\0\2\1\2\11\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private int startLine = 0;

  private String file = "";

  public void setStartLine(int startLine)
  {
    this.startLine = startLine;
  }

  public void setFile(String file)
  {
    this.file = file;
  }

  private Symbol symbol(int type) {
    return new PrintableSymbol(type, file, yyline + startLine, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new PrintableSymbol(type, file, yyline + startLine, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ECATokenLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
                "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzCurrentPos = 0;
    zzMarkedPos = 0;
    zzStartRead = 0;
    zzEndRead = 0;
    zzFinalHighSurrogate = 0;
    yyline = 0;
    yycolumn = 0;
    yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;

      yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
          case '\u000B':  // fall through
          case '\u000C':  // fall through
          case '\u0085':  // fall through
          case '\u2028':  // fall through
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { throw new Error("Illegal character <"+ yytext()+">");
          }
          // fall through
          case 70: break;
          case 2:
          { /* ignore */
          }
          // fall through
          case 71: break;
          case 3:
          { return symbol(sym.NOT);
          }
          // fall through
          case 72: break;
          case 4:
          { string.setLength(0); yybegin(STRING);
          }
          // fall through
          case 73: break;
          case 5:
          { yybegin(COMMENT);
          }
          // fall through
          case 74: break;
          case 6:
          { return symbol(sym.MOD);
          }
          // fall through
          case 75: break;
          case 7:
          { return symbol(sym.BAND);
          }
          // fall through
          case 76: break;
          case 8:
          { string.setLength(0);  yybegin(QUOTEDIDENT);
          }
          // fall through
          case 77: break;
          case 9:
          { return symbol(sym.LPAREN);
          }
          // fall through
          case 78: break;
          case 10:
          { return symbol(sym.RPAREN);
          }
          // fall through
          case 79: break;
          case 11:
          { return symbol(sym.MUL);
          }
          // fall through
          case 80: break;
          case 12:
          { return symbol(sym.PLUS);
          }
          // fall through
          case 81: break;
          case 13:
          { return symbol(sym.COMMA);
          }
          // fall through
          case 82: break;
          case 14:
          { return symbol(sym.MINUS);
          }
          // fall through
          case 83: break;
          case 15:
          { return symbol(sym.DOT);
          }
          // fall through
          case 84: break;
          case 16:
          { return symbol(sym.DIV);
          }
          // fall through
          case 85: break;
          case 17:
          { return symbol(sym.INTEGER_LITERAL, Integer.valueOf(yytext()));
          }
          // fall through
          case 86: break;
          case 18:
          { return symbol(sym.COLON);
          }
          // fall through
          case 87: break;
          case 19:
          { return symbol(sym.SEMI);
          }
          // fall through
          case 88: break;
          case 20:
          { return symbol(sym.LT);
          }
          // fall through
          case 89: break;
          case 21:
          { return symbol(sym.ASSIGN);
          }
          // fall through
          case 90: break;
          case 22:
          { return symbol(sym.GT);
          }
          // fall through
          case 91: break;
          case 23:
          { return symbol(sym.TERN_IF);
          }
          // fall through
          case 92: break;
          case 24:
          { return symbol(sym.IDENTIFIER, yytext());
          }
          // fall through
          case 93: break;
          case 25:
          { return symbol(sym.LSQUARE);
          }
          // fall through
          case 94: break;
          case 26:
          { return symbol(sym.RSQUARE);
          }
          // fall through
          case 95: break;
          case 27:
          { return symbol(sym.BXOR);
          }
          // fall through
          case 96: break;
          case 28:
          { return symbol(sym.LBRACE);
          }
          // fall through
          case 97: break;
          case 29:
          { return symbol(sym.BOR);
          }
          // fall through
          case 98: break;
          case 30:
          { return symbol(sym.RBRACE);
          }
          // fall through
          case 99: break;
          case 31:
          { return symbol(sym.TWIDDLE);
          }
          // fall through
          case 100: break;
          case 32:
          { string.append( yytext() );
          }
          // fall through
          case 101: break;
          case 33:
          { throw new Error("File " + file + " line " + (yyline + startLine) + " : newline in string");
          }
          // fall through
          case 102: break;
          case 34:
          { yybegin(YYINITIAL);
            return symbol(sym.STRING_LITERAL,
                    string.toString());
          }
          // fall through
          case 103: break;
          case 35:
          { throw new Error("File " + file + " line " + (yyline + startLine) + " : illegal character in string <"+ yytext()+">");
          }
          // fall through
          case 104: break;
          case 36:
          { throw new Error("File " + file + " line " + (yyline + startLine) + " : newline in quoted identifier");
          }
          // fall through
          case 105: break;
          case 37:
          { yybegin(YYINITIAL);
            return symbol(sym.IDENTIFIER,
                    string.toString());
          }
          // fall through
          case 106: break;
          case 38:
          { /*ignore */
          }
          // fall through
          case 107: break;
          case 39:
          { yybegin(YYINITIAL);
          }
          // fall through
          case 108: break;
          case 40:
          { return symbol(sym.NE);
          }
          // fall through
          case 109: break;
          case 41:
          { return symbol(sym.DOLLAR, yytext());
          }
          // fall through
          case 110: break;
          case 42:
          { return symbol(sym.AND);
          }
          // fall through
          case 111: break;
          case 43:
          { return symbol(sym.FLOAT_LITERAL, Float.valueOf(yytext()));
          }
          // fall through
          case 112: break;
          case 44:
          { return symbol(sym.LONG_LITERAL, Long.valueOf(yytext().substring(0, yytext().length() - 1)));
          }
          // fall through
          case 113: break;
          case 45:
          { return symbol(sym.LSH);
          }
          // fall through
          case 114: break;
          case 46:
          { return symbol(sym.LE);
          }
          // fall through
          case 115: break;
          case 47:
          { return symbol(sym.EQ);
          }
          // fall through
          case 116: break;
          case 48:
          { return symbol(sym.GE);
          }
          // fall through
          case 117: break;
          case 49:
          { return symbol(sym.RSH);
          }
          // fall through
          case 118: break;
          case 50:
          { return symbol(sym.DO);
          }
          // fall through
          case 119: break;
          case 51:
          { return symbol(sym.IF);
          }
          // fall through
          case 120: break;
          case 52:
          { return symbol(sym.OR);
          }
          // fall through
          case 121: break;
          case 53:
          { string.append('\"');
          }
          // fall through
          case 122: break;
          case 54:
          { string.append('\\');
          }
          // fall through
          case 123: break;
          case 55:
          { string.append('\n');
          }
          // fall through
          case 124: break;
          case 56:
          { string.append('\r');
          }
          // fall through
          case 125: break;
          case 57:
          { string.append('\t');
          }
          // fall through
          case 126: break;
          case 58:
          { return symbol(sym.DOUBLE_LITERAL, Double.valueOf(yytext().substring(0, yytext().length() - 1)));
          }
          // fall through
          case 127: break;
          case 59:
          { return symbol(sym.URSH);
          }
          // fall through
          case 128: break;
          case 60:
          { return symbol(sym.NEW);
          }
          // fall through
          case 129: break;
          case 61:
          { return symbol(sym.BIND);
          }
          // fall through
          case 130: break;
          case 62:
          { return symbol(sym.NULL_LITERAL);
          }
          // fall through
          case 131: break;
          case 63:
          { return symbol(sym.BOOLEAN_LITERAL, Boolean.TRUE);
          }
          // fall through
          case 132: break;
          case 64:
          { return symbol(sym.BOOLEAN_LITERAL, Boolean.FALSE);
          }
          // fall through
          case 133: break;
          case 65:
          { return symbol(sym.THROW);
          }
          // fall through
          case 134: break;
          case 66:
          { return symbol(sym.CLASS);
          }
          // fall through
          case 135: break;
          case 67:
          { return symbol(sym.RETURN);
          }
          // fall through
          case 136: break;
          case 68:
          { return symbol(sym.NOTHING);
          }
          // fall through
          case 137: break;
          case 69:
          { return symbol(sym.INSTANCEOF);
          }
          // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
